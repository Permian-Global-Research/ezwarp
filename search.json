[{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://permian-global-research.github.io/ezwarp/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://permian-global-research.github.io/ezwarp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugh Graham. Author, maintainer.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Graham H (2023). ezwarp: utility tool working gdal warp R. R package version 0.0.2.0, https://permian-global-research.github.io/ezwarp/.","code":"@Manual{,   title = {ezwarp: A utility tool for working with gdal warp in R},   author = {Hugh Graham},   year = {2023},   note = {R package version 0.0.2.0},   url = {https://permian-global-research.github.io/ezwarp/}, }"},{"path":[]},{"path":"https://permian-global-research.github.io/ezwarp/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A utility tool for working with gdal warp in R","text":"goal ezwarp simplify use gdalwarp R. Gdal warp powerful fast Image reprojection warping utility. can used reproject (.e. transform new Coordinate Reference System), crop, mask resample. Unlike many tools R, can done single command, using warp tool, saving time code. present, many ways access functionality gdalwarp R. include: vapour::warp_raster sf::gdal_utils stars::st_warp {gdalio} terra::project {whatarelief} system(“gdalwarp …”) packages/functions (perhaps sensibly) restrict certain functionality gdalwarp make specific tasks much simpler (e.g. ‘terra::project’ allows single input source). two warp “engines” provided ezwarp: vapour (default) sf. advantage vapour supports direct--memory read raster data need store intermediate tif files. However, things get large, can problematic load entire dataset memory, case sf may suitable. ezwarp provides simple access majority gdalwarp’s functionality simplified API allows users focus task hand rather disperate classes (conversions) exist r spatial ecosystem. warp raster dataset, gdalwarp requires extent, dimension projection. can defined ezwarp manually using ezgrid class object simple s3 object comprising three key variables (created ezgrid()). However, estimating raster dimensions can unintuitive step removed required spatial context ground. , ezwarp provides resolution argument (res) can used ezgrid object (without missing dimension value) following R spatial classes: SpatRaster, SpatVector, sf, sfc, stars. addition, ezwarp also supports file paths URLs valid spatial files (’s gdal ). terra, sf stars best supported popular spatial packages R ecosystem. ezwarp aims support types along vector matrix classes (output formats ). spatial (indeed non-spatial) classes may supported future.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A utility tool for working with gdal warp in R","text":"","code":"#install.packages(\"remotes\") remotes::install_github(\"Permian-Global-Research/ezwarp\")"},{"path":"https://permian-global-research.github.io/ezwarp/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"A utility tool for working with gdal warp in R","text":"simple example, defining grid manually ezgrid. use excellent global GEBCO elevation dataset … Now clearly downloading full resolution take forever. , using gdalwarp can resample modest resolution - case 0.5 degrees - manually setting dimension. Note output can either SpatRaster stars object. Also, see general plotting function sciplot provided make use great scientific colour palettes provided {scico} package.  cutline argument can used mask regions input spatial vector. demonstrate using online geojson Madagascar directly. Note also reuse source target (y) set res argument 0.5 make sure resample grid. also specify crop_to_cutline = TRUE otherwise extent default defined y. example, ‘sf’ warp engine used rather ‘vapour’.  can also pass additional arguments gdalwarp using options command - See gdalwarp docs. pass sql query cutline feature specifying want use Stokes County (nc dataset sf). Also crop_to_cutline argument used limit extent specified cropline feature. example also demonstrates ezwarp handles multiple bands, case esri satellite WMS layer. default, bands read - can changed bands argument.  example just illustrate ezwarp can handle differing inputs sources - url/filepath/SpatRaster/stars can use along sf/sfc/SpatVector/ezgrid target (y) .  matrix output class also supported. return matrix source one band (one requested). multidimensional array returned one band present. returned object includes extent, dimension projections attributes. can useful plan directly manipulate data R. objects happen also compatible {rayshader…}","code":"library(ezwarp) library(terra) template <- ezgrid(c(-180, 180, -90, 90),                    dimension = c(720, 360),                    projection='EPSG:4326')  src <- \"/vsicurl/https://public.services.aad.gov.au/datasets/science/GEBCO_2021_GEOTIFF/GEBCO_2021.tif\"  world.el.terra <- ezwarp(x=src, y=template) world.el.stars <- ezwarp(x=src, y=template, out_class = 'stars') sciplot(world.el.terra, pal='bukavu', centre=TRUE) sciplot(world.el.stars, pal='oleron', n =256, centre=TRUE) madagascar <-\"https://github.com/wmgeolab/geoBoundariesArchive_4_0_0/raw/299e00623ece6c03bcb9a751eda6094b1eac85a6/releaseData/gbOpen/MDG/ADM0/geoBoundaries-MDG-ADM0.geojson\"  world.el.mask <- ezwarp(x=src, y=src, res=0.1, cutline = madagascar,                          crop_to_cutline = TRUE, engine = 'sf') #> gdalinfo - unable to open 'https://github.com/wmgeolab/geoBoundariesArchive_4_0_0/raw/299e00623ece6c03bcb9a751eda6094b1eac85a6/releaseData/gbOpen/MDG/ADM0/geoBoundaries-MDG-ADM0.geojson'.  sciplot(world.el.mask, pal='lapaz' ) library(sf)  esri_sat <- \"<GDAL_WMS><Service name=\\\"TMS\\\"><ServerUrl>http://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/${z}/${y}/${x}<\/ServerUrl><\/Service><DataWindow><UpperLeftX>-20037508.34<\/UpperLeftX><UpperLeftY>20037508.34<\/UpperLeftY><LowerRightX>20037508.34<\/LowerRightX><LowerRightY>-20037508.34<\/LowerRightY><TileLevel>17<\/TileLevel><TileCountX>1<\/TileCountX><TileCountY>1<\/TileCountY><YOrigin>top<\/YOrigin><\/DataWindow><Projection>EPSG:900913<\/Projection><BlockSizeX>256<\/BlockSizeX><BlockSizeY>256<\/BlockSizeY><BandsCount>3<\/BandsCount><MaxConnections>10<\/MaxConnections><Cache /><\/GDAL_WMS>\"  f <- system.file(\"gpkg\", \"nc.gpkg\", package = \"sf\")  nc.mask <- ezwarp(x=esri_sat, y=esri_sat, res=100, cutline = f,                    crop_to_cutline = TRUE, nodata = -99, engine=\"sf\") #> gdalinfo - unable to open '/home/hugh/R/x86_64-pc-linux-gnu-library/4.2/sf/gpkg/nc.gpkg'.  jackson.mask <- ezwarp(x=esri_sat, y=esri_sat, res=25, cutline = f,                    options=c(\"-csql\", \"SELECT * FROM 'nc.gpkg' WHERE NAME = 'Jackson'\"),                    crop_to_cutline = TRUE, nodata = -99) #> gdalinfo - unable to open '/home/hugh/R/x86_64-pc-linux-gnu-library/4.2/sf/gpkg/nc.gpkg'.  f_sf <- read_sf(f) |>     st_transform(vapour::vapour_raster_info(esri_sat)$projection)  terra::plotRGB(nc.mask) plot(st_geometry(f_sf), add=TRUE, border='grey90') terra::plotRGB(jackson.mask) plot(st_geometry(f_sf), add=TRUE, border='grey10') nc_sub1 <- f_sf[1:10,] nc_sub2 <- vect(f_sf[90:100,])  nc_sub1.terra <- ezwarp(x=src, y=nc_sub1, res=100, cutline= nc_sub1,                         crop_to_cutline = TRUE)   nc_sub2.stars <- ezwarp(x=src, y=nc_sub2, res=200, cutline= nc_sub2,                         crop_to_cutline = TRUE, out_class = 'stars')  multi.ras <- ezwarp(x=list(nc_sub1.terra, nc_sub2.stars),                      y=f_sf, res=200, out_class = 'stars')   sciplot(nc_sub1.terra, pal = 'bamako') plot(st_geometry(f_sf), add=TRUE, border='grey30')  sciplot(nc_sub2.stars, pal = 'vanimo', reset=FALSE) plot(st_geometry(f_sf), add=TRUE, border='grey30', reset=TRUE)  sciplot(multi.ras, pal = 'romaO', reset=FALSE) plot(st_geometry(f_sf), add=TRUE, border='grey30', reset=TRUE) library(rayshader)  # get terrain as matrix nc_dtm.mat <- ezwarp(src, jackson.mask,                      res=50, out_class = 'matrix', nodata=-999,                       resample = \"lanczos\")  nc_dtm.mat|>    sphere_shade(texture = \"imhof4\") |>    add_shadow(ray_shade(nc_dtm.mat, zscale=10, sunaltitude = 20,   sunangle = 200,), 0)|>    plot_3d(nc_dtm.mat, zscale = 10,fov = 130, theta = 50, phi = 20, zoom=0.1,            windowsize = c(1000, 800)) Sys.sleep(0.2) render_depth(focallength = 300, clear = TRUE)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an ezgrid object — ezgrid","title":"Create an ezgrid object — ezgrid","text":"Create ezgrid object define desired extent, projection crs. Use y argument ezwarp().","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an ezgrid object — ezgrid","text":"","code":"ezgrid(extent, dimension = NULL, projection, source = NULL)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an ezgrid object — ezgrid","text":"extent numeric vector following form: c(xmin, xmax, ymin, ymax) dimension numeric vector, length 2. define XY dimension grid: c(x.dim, y.dim) projection projection warped raster (Well-Known-Text, projection string accepted GDAL) source default NULL optional spatial source/file path. used internally.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezgrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an ezgrid object — ezgrid","text":"ezgrid object","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezgrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an ezgrid object — ezgrid","text":"","code":"ezgrid(extent=c(-180, 180, -90, 90),    dimension = c(180, 90),    projection = 'EPSG:4326') #> $extent #> [1] -180  180  -90   90 #>  #> $dimension #> [1] 180  90 #>  #> $projection #> [1] \"EPSG:4326\" #>  #> $source #> NULL #>  #> attr(,\"class\") #> [1] \"ezgrid\""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezwarp.html","id":null,"dir":"Reference","previous_headings":"","what":"An easy way to use gdal warp in R — ezwarp","title":"An easy way to use gdal warp in R — ezwarp","text":"super handy warper limited returns memory SpatRast. May cause issues creating raster > memory. Also clear implement cutline feature.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezwarp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An easy way to use gdal warp in R — ezwarp","text":"","code":"ezwarp(   x,   y,   res,   bands = NULL,   resample = \"bilinear\",   cutline = NULL,   crop_to_cutline = FALSE,   nodata = NULL,   out_class = c(\"SpatRaster\", \"stars\", \"matrix\", \"vector\"),   filename = NULL,   overwrite = TRUE,   options = \"\",   compression = \"DEFLATE\",   engine = c(\"vapour\", \"sf\"),   ... )"},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezwarp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An easy way to use gdal warp in R — ezwarp","text":"x list vector raster source(s) SpatRaster(s) y raster source, SpatRaster, sf, sfc res numeric. resolution output SpatRaster. bands numeric bands use source. used engine=\"vapour\" resample resampling method. default bilinear, see details. cutline sf, sfc, SpatVector ogr-readable spatial vector source mask output raster. see -cutline argument gdalwarp crop_to_cutline logical. TRUE, output cropped limits mask given cutline. nodata Numeric. data value used output. out_class default \"SpatRaster\". Can either \"SpatRaster\", \"stars\", \"matrix\", \"vector\" filename filepath raster. given \"vapour\" used engine, output SpatRaster/stars object source. NULL memory raster returned. sf engine used filename NULL tempfile used. overwrite logical - file overwritten. options gdal options. compression default \"DEFLATE\". character describing tif compression e.g. \"LZW\" engine either \"vapour\" \"sf\". choose warper use. vapour supports memory raster creation. ... Additional args passed vapour::vapour_warp_raster. Might removed.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezwarp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"An easy way to use gdal warp in R — ezwarp","text":"one following defined out_class: 'SpatRaster', 'stars','matrix', 'vector'","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezwarp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An easy way to use gdal warp in R — ezwarp","text":"selecting resample method, choose following options: 'bilinear' (default), 'near', 'cubic', 'cubicspline', 'lanczos', 'average', 'mode', 'max', 'min', 'med', 'q1', 'q3', 'sum'. details methods see: https://gdal.org/programs/gdalwarp.html raster source categorical make sure use 'nearest'. \"matrix\" used out_class, matrix returned one band targeted. multiple bands targeted, n-dimensional array returned. matrix returned oriented North . \"vector\" used out_class, vector returned single band target, list vectors returned multiband target.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/ezwarp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An easy way to use gdal warp in R — ezwarp","text":"","code":"f <- system.file(\"ex/elev.tif\", package=\"terra\")  r.terra <- terra::rast(f)  ezwarp(f,f, res=1e-4) #> class       : SpatRaster  #> dimensions  : 7501, 7918, 1  (nrow, ncol, nlyr) #> resolution  : 1e-04, 1e-04  (x, y) #> extent      : 5.7416, 6.5334, 49.4416, 50.1917  (xmin, xmax, ymin, ymax) #> coord. ref. : lon/lat WGS 84 (EPSG:4326)  #> source(s)   : memory #> name        : Band1  #> min value   :   141  #> max value   :   547   ezwarp(r.terra,f, res=1e-4, engine = 'sf', out_class=\"stars\") #> stars object with 2 dimensions and 1 attribute #> attribute(s), summary of first 1e+05 cells: #>                       Min. 1st Qu. Median Mean 3rd Qu. Max.  NA's #> file1f9b15c0babd.tif    NA      NA     NA  NaN      NA   NA 1e+05 #> dimension(s): #>   from   to  offset  delta refsys point x/y #> x    1 7918  5.7416  1e-04 WGS 84 FALSE [x] #> y    1 7501 50.1917 -1e-04 WGS 84 FALSE [y]  v <- ezwarp(r.terra,f, res=1e-4, out_class=\"vector\")[[1]]  hist(v)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial Dimension — get_dim","title":"Get spatial Dimension — get_dim","text":"class agnostic function return dimensions spatial object. applicable rasters - spatial vectors return NULL.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial Dimension — get_dim","text":"","code":"get_dim(x, ...)  # S3 method for SpatRaster get_dim(x, ...)  # S3 method for SpatVector get_dim(x, ...)  # S3 method for sf get_dim(x, ...)  # S3 method for sfc get_dim(x, ...)  # S3 method for stars get_dim(x, ...)  # S3 method for stars_proxy get_dim(x, ...)  # S3 method for character get_dim(x, ...)  # S3 method for ezgrid get_dim(x, ...)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial Dimension — get_dim","text":"x spatial object, file path source ... used","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial Dimension — get_dim","text":"","code":"f <- system.file(\"ex/elev.tif\", package=\"terra\")  get_dim(f) #> NULL get_dim(terra::rast(f)) #> [1] 95 90 f2 <- system.file(\"ex/lux.shp\", package=\"terra\")  get_dim(f2) #> gdalinfo - unable to open '/home/runner/work/_temp/Library/terra/ex/lux.shp'. #> NULL"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial extent — get_ext","title":"Get spatial extent — get_ext","text":"class agnostic function return bounding extent (.e. bounding box) spatial object.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial extent — get_ext","text":"","code":"get_ext(x, ...)  # S3 method for SpatRaster get_ext(x, ...)  # S3 method for SpatVector get_ext(x, ...)  # S3 method for sf get_ext(x, ...)  # S3 method for sfc get_ext(x, ...)  # S3 method for stars get_ext(x, ...)  # S3 method for stars_proxy get_ext(x, ...)  # S3 method for ezgrid get_ext(x, ...)  # S3 method for character get_ext(x, ...)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial extent — get_ext","text":"x spatial object, file path source ... used","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial extent — get_ext","text":"numeric vector length 4. Values returned : \"xmin\", \"xmax\", \"ymin\", \"ymax\"","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_ext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial extent — get_ext","text":"","code":"f <- system.file(\"ex/elev.tif\", package=\"terra\")  get_ext(f) #> [1]  5.741667  6.533333 49.441667 50.191667 get_ext(terra::rast(f)) #> [1]  5.741667  6.533333 49.441667 50.191667 f2 <- system.file(\"ex/lux.shp\", package=\"terra\")  get_ext(f2) #> gdalinfo - unable to open '/home/runner/work/_temp/Library/terra/ex/lux.shp'. #> [1]  5.744140  6.528252 49.447807 50.181622"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_proj.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Spatial Projection — get_proj","title":"Get Spatial Projection — get_proj","text":"class agnostic function return projection spatial object source. returned projection uses wkt format.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_proj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Spatial Projection — get_proj","text":"","code":"get_proj(x, ...)  # S3 method for SpatRaster get_proj(x, ...)  # S3 method for SpatVector get_proj(x, ...)  # S3 method for sf get_proj(x, ...)  # S3 method for sfc get_proj(x, ...)  # S3 method for stars get_proj(x, ...)  # S3 method for stars_proxy get_proj(x, ...)  # S3 method for ezgrid get_proj(x, ...)  # S3 method for character get_proj(x, ...)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_proj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Spatial Projection — get_proj","text":"x spatial object, file path source ... used","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_proj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Spatial Projection — get_proj","text":"character - WKT projection string.","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_proj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Spatial Projection — get_proj","text":"","code":"f <- system.file(\"ex/elev.tif\", package=\"terra\")  get_proj(f) #> [1] \"GEOGCRS[\\\"WGS 84\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    ID[\\\"EPSG\\\",4326]]\" get_proj(terra::rast(f)) #> [1] \"GEOGCRS[\\\"WGS 84\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    ID[\\\"EPSG\\\",4326]]\" f2 <- system.file(\"ex/lux.shp\", package=\"terra\")  get_proj(f2) #> gdalinfo - unable to open '/home/runner/work/_temp/Library/terra/ex/lux.shp'. #> [1] \"GEOGCS[\\\"WGS 84\\\",DATUM[\\\"WGS_1984\\\",SPHEROID[\\\"WGS 84\\\",6378137,298.257223563,AUTHORITY[\\\"EPSG\\\",\\\"7030\\\"]],AUTHORITY[\\\"EPSG\\\",\\\"6326\\\"]],PRIMEM[\\\"Greenwich\\\",0,AUTHORITY[\\\"EPSG\\\",\\\"8901\\\"]],UNIT[\\\"degree\\\",0.0174532925199433,AUTHORITY[\\\"EPSG\\\",\\\"9122\\\"]],AXIS[\\\"Latitude\\\",NORTH],AXIS[\\\"Longitude\\\",EAST],AUTHORITY[\\\"EPSG\\\",\\\"4326\\\"]]\""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the source of a spatial object — get_source","title":"Get the source of a spatial object — get_source","text":"class agnostic function return create source spatial object.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source of a spatial object — get_source","text":"","code":"get_source(x, force = FALSE)  # S3 method for SpatRaster get_source(x, force = FALSE)  # S3 method for stars get_source(x)  # S3 method for stars_proxy get_source(x, force = FALSE)  # S3 method for character get_source(x)  # S3 method for sf get_source(x)  # S3 method for sfc get_source(x)  # S3 method for SpatVector get_source(x)"},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source of a spatial object — get_source","text":"x raster source - either character .e local source remote. remote, src must prefixed relevant gdal module. e.g. \"/vsicurl/\" force Logical determine SpatRaster stars_proxy object re-saved even disk sources exist.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source of a spatial object — get_source","text":"character source.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_source.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the source of a spatial object — get_source","text":"SpatRaster provided source raster used.","code":""},{"path":[]},{"path":"https://permian-global-research.github.io/ezwarp/reference/get_source.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the source of a spatial object — get_source","text":"","code":"f <- system.file(\"ex/elev.tif\", package=\"terra\")  get_source(f) #> [1] \"/home/runner/work/_temp/Library/terra/ex/elev.tif\" get_source(terra::rast(f), force=TRUE) #> [1] \"/tmp/RtmpcVTl9Y/file1f9b1d3bad9e.tif\" f2 <- system.file(\"ex/lux.shp\", package=\"terra\")  get_source(f2) #> gdalinfo - unable to open '/home/runner/work/_temp/Library/terra/ex/lux.shp'. #> [1] \"/home/runner/work/_temp/Library/terra/ex/lux.shp\""},{"path":"https://permian-global-research.github.io/ezwarp/reference/sciplot.html","id":null,"dir":"Reference","previous_headings":"","what":"sciplot: plot methods using colours from {scico} — sciplot","title":"sciplot: plot methods using colours from {scico} — sciplot","text":"plot 'SpatRaster' 'stars' object using {scico} palettes. View palette options sciplot_pals()","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/sciplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sciplot: plot methods using colours from {scico} — sciplot","text":"","code":"sciplot(x, pal = \"acton\", n, direction, centre, ...)  # S3 method for SpatRaster sciplot(   x,   pal = \"acton\",   n = 256,   direction = 1,   centre = FALSE,   n_quantile = NULL,   ... )  # S3 method for stars sciplot(x, pal = \"acton\", n = 11, direction = 1, centre = FALSE, ...)  sciplot_pals()"},{"path":"https://permian-global-research.github.io/ezwarp/reference/sciplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sciplot: plot methods using colours from {scico} — sciplot","text":"x object plot, either SpatRaster stars object pal Default 'acton'. Character describing colour palette use. choose sciplot_pals() n Numeric length 1. number breaks/colours include sclae direction Default 1. Direction colour palette reverse use -1. centre Logical. TRUE, palette centred around zero. good bivariate/split palettes. ... additional args passed plot. n_quantile Numeric. NULL sets number quantile breaks use sciplot.SpatRaster. See details.","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/sciplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sciplot: plot methods using colours from {scico} — sciplot","text":"character vector scico palette names. see scico::scico_palette_names()","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/sciplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"sciplot: plot methods using colours from {scico} — sciplot","text":"n_quantile sets quantile breaks colour palette. using breaks, terra::plot support continuous legend default stars. sciplot_pals plots various sciplot palettes returns names character vector. Wrapper scico::scico_palette_show()  scico::scico_palette_names().","code":""},{"path":"https://permian-global-research.github.io/ezwarp/reference/sciplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sciplot: plot methods using colours from {scico} — sciplot","text":"","code":"src <- \"/vsicurl/https://public.services.aad.gov.au/datasets/science/GEBCO_2021_GEOTIFF/GEBCO_2021.tif\" template <- ezgrid(c(-180, 180, -90, 90), c(720, 360), 'EPSG:4326') world.el.terra <- ezwarp(x=src, y=template) sciplot(world.el.terra, pal='oleron', centre=TRUE)   f <- system.file(\"ex/elev.tif\", package=\"terra\")  r.stars <- stars::read_stars(f) sciplot(r.stars)   sciplot_pals()  #>  [1] \"acton\"   \"bam\"     \"bamako\"  \"bamO\"    \"batlow\"  \"batlowK\" \"batlowW\" #>  [8] \"berlin\"  \"bilbao\"  \"broc\"    \"brocO\"   \"buda\"    \"bukavu\"  \"cork\"    #> [15] \"corkO\"   \"davos\"   \"devon\"   \"fes\"     \"grayC\"   \"hawaii\"  \"imola\"   #> [22] \"lajolla\" \"lapaz\"   \"lisbon\"  \"nuuk\"    \"oleron\"  \"oslo\"    \"roma\"    #> [29] \"romaO\"   \"tofino\"  \"tokyo\"   \"turku\"   \"vanimo\"  \"vik\"     \"vikO\""}]
